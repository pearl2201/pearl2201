[
    {
        "ref": "https://pearl2201.com/blog/the-giant-black-book-of-computer-virus-notes/",
        "title": "Virus Notes",
        "section": "blog",
        "tags": ["programming","malware"],
        "date" : "2020.08.28",
        "body": "Computer Virus Basics  Virus is a program that reproduces.  Virus structure  Search routine: which locates new files or new disks which are worthwhile targets for infection. Replicate routine: copy itself into the program which search routine locates. Anti-detection routine  "
    }
,
    {
        "ref": "https://pearl2201.com/blog/project-euler-problem-3-largest-prime-factor/",
        "title": "Project Euler Problem 3: Largest prime factor",
        "section": "blog",
        "tags": ["programming"],
        "date" : "2019.10.02",
        "body": "Problem: The prime factors of 13195 are 5, 7, 13 and 29.\nWhat is the largest prime factor of the number 600851475143 ?\nSolution: Về cơ bản, đây là bài toán phân tích một số thành thừa số nguyên tố và chọn ra số nguyên tố lớn nhất.\nĐể phân tích một số N thành thừa số nguyên tố:\n Ta sẽ liên tục chia N cho số nguyên tố t(k) cho tới khi không thể tiếp tục được nữa. Tới đây: Nếu N \u0026gt; t(k) thì ta tìm số nguyên tố t(k+1) quay lại bước trên. Nếu N \u0026lt; t(k) thì t(k) là số nguyên tố lớn nhất. Mã code với Rust.:  fn get_next_prime_number(arr: \u0026amp;Vec\u0026lt;i64\u0026gt;) -\u0026gt; i64 {\rlet last_prime = arr.last().unwrap();\rlet mut next_prime = last_prime + 1;\rloop {\rlet mut is_valid = true;\rfor x in arr {\rif next_prime % x == 0 {\ris_valid = false;\rbreak;\r}\r}\rif is_valid {\rbreak;\r} else {\rnext_prime = next_prime + 1;\r}\r}\rreturn next_prime;\r}\rfn largest_prime_factor(mut n: i64) -\u0026gt; i64 {\rlet mut arr = Vec::new();\rarr.push(2);\rlet mut current_prime: i64;\rloop {\rcurrent_prime = arr[arr.len() -1];\rwhile n % current_prime == 0 \u0026amp;\u0026amp; n \u0026gt;= current_prime {\rn = n / current_prime;\r}\rif n \u0026gt; current_prime {\rlet temp = get_next_prime_number(\u0026amp;arr);\rarr.push(temp);\r} else {\rbreak;\r}\r}\rreturn current_prime;\r}\rfn main() {\rprintln!(\u0026quot;Larngest prime factor is: {}\u0026quot;, largest_prime_factor(600851475143));\r}\r#[test]\rfn test_get_next_prime() {\rlet mut arr = Vec::new();\rarr.push(2);\rlet mut i = 0;\rwhile i \u0026lt; 10 {\rlet temp = get_next_prime_number(\u0026amp;arr);\rarr.push(temp);\ri = i + 1;\r}\rassert_eq!(arr.len(), 11);\rassert_eq!(arr[1], 3);\r}\r#[test]\rfn test_largest_prime_factor() {\rassert_eq!(largest_prime_factor(13195), 29);\r}\r"
    }
]
