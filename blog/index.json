[
    {
        "ref": "https://pearl2201.com/blog/the-giant-black-book-of-computer-virus-notes/",
        "title": "Virus Notes",
        "section": "blog",
        "tags": ["programming","malware"],
        "date" : "2020.08.28",
        "body": "Computer Virus Basics  Virus is a program that reproduces.  Virus structure  Search routine: which locates new files or new disks which are worthwhile targets for infection. Replicate routine: copy itself into the program which search routine locates. Anti-detection routine  "
    }
,
    {
        "ref": "https://pearl2201.com/blog/physical-in-game-networking/",
        "title": "Physical in Game Networking",
        "section": "blog",
        "tags": ["game"],
        "date" : "2019.11.01",
        "body": "Physic (yếu tố vật lý) trong game networking là một vấn đề khó.\n Thông thường có 3 chiến lược để thực hiện:\n Client thực hiện tính toán vật lý hoàn toàn. Client tính toán vật lý rồi server sẽ kiểm chứng tính toán. Server thực hiện tính toán hoàn dựa trên input của client.   Trên thực tế, phương án 3 (server tính toán hoàn toàn) rất tốn kém và phức tạp, vật nên trong thực tế, chúng ta thường chứng kiến các kiểu số 1 và 2 đi kèm với một số phép tối ưu:\n Chỉ tính toán các yếu tố quan trọng như va chạm, đan trúng player… và bỏ qua các tính toán về mặt địa hình… Đơn giản hóa các yếu tố vật lý trong tính toán: quy hình dạng về các trường hợp dễ dàng tính toán va chạm, overlap như hình tròn, khối hộp, đường thẳng. Né tránh các yếu tố vật lý yêu cầu update như đạn đuổi… Ngoài ra đơn giản hóa quá trình thực hiện hành động như là nếu bạn bắn đạn thì sẽ ngay lập tức cast 1 raycast để tính toán va chạm, rồi trực tiếp trừ điểm vào máu player. Viên đạn bay tới đơn giản chỉ là thể hiện và chấp nhận là viên đạn có thể bay sai lệch sau một khoảng thời giản. Ủy nhiệm 1 client tính toán dựa trên truthcredit, server sẽ vertify lại kết quả. Ủy nhiệm 2 client tính toán để đối chiếu kết quả với nhau Ủy nhiệm xoay vòng giữa các client trong cùng 1 game. Giải quyết collide data giữa các kết quả tính toán client dựa trên verify và số đông. Nếu phát hiện ra các hành vi gian lận, thì ban ngay lập tức đối tượng gây ra hành vì đó, việc có terminate game session hay không phục thuộc vào hậu quả và đánh giá từ phía nhà phát hành.  "
    }
,
    {
        "ref": "https://pearl2201.com/blog/serverless-mics-note/",
        "title": "Serverless mics note",
        "section": "blog",
        "tags": ["backend"],
        "date" : "2019.10.22",
        "body": "Mình biết serverless khoảng 2 năm về trước và chưa dùng bao giờ :)) Thi thoảng có đọc vài bài về nó nên cũng nắm qua đại khái.\nĐặc trưng của serverless là bạn không deploy một server, mà bạn viết các chương trình chạy lấy input rồi xuất output theo chuẩn sdk do nhà cung cấp dịch vụ đưa cho. Điểm khác biệt chính so với server thông thường là bạn không phải “loop” để cho server listen request (http/tcp|udp) và không phải duy trì connection tới các database.\nConcept này nó giống như kiểu bạn dùng một ngôn ngữ chuyên về communication như Erlang, Elixir… để nhận request, sau đó bạn gọi một đoạn shell chạy tới chương trình “serverless” bạn đã viết từ trước, để trả kết quả về.\nƯu điểm lớn nhất là tiết kiệm chi phí và sức vận hành, phù hợp làm page tĩnh, bán tĩnh…\nNhược điểm là debug, thời gian warmup…, không phù hợp các app thời giản thực, đặc biệt là game server… (Stateful)\n"
    }
,
    {
        "ref": "https://pearl2201.com/blog/unity-animation/",
        "title": "Unity Animation",
        "section": "blog",
        "tags": ["game"],
        "date" : "2019.10.22",
        "body": "Về cơ bản, để làm animation cho character trong game 2d làm bằng Unity thì chúng ta có 2 lựa chọn chính:\n Dùng model 3d, rig, animate trong Maya… rồi import vào Unity Dùng spine  Dung lượng Model 3d khi build thì sẽ nặng hơn spine, vì chung texture nhưng so giữa (atlas + json) với file model có chênh lệch không nhỏ.\nSử dụng   Model 3d thì nên dùng khi mà bạn phải xử lý blend bone phức tạp, ví dụ như mặt người… Bạn phải dùng animator để mix giữa các animation với nhau, cẩn thận khi xoay quanh trục Z nếu làm flat. Ngoài ra nếu dùng model 3d cho UI thì sẽ phải nghĩ cẩn thận, nếu không sẽ có rắc rối không nhỏ 😀\n  Spine thì dễ sử dụng, có thể dùng trực tiếp trong UI canvas với skeletongraphic, vì flat nên xoay quanh trục Z không ảnh hưởng gì.\n  Bản quyền   Maya, blender trên mạng đầy rẫy crack.\n  Spine thì có một cái crack duy nhất từ bản 1.6 cách đây hơn 6 năm…\n  Mics   Bạn học 3d, sau khi không làm game thì có thể đi làm hoạt họa, làm thiết kế nội thất…\n  Bạn học spine thì đời này chỉ có làm game nếu các ngành khác không sử dụng spine… =))\n  "
    }
,
    {
        "ref": "https://pearl2201.com/blog/project-euler-problem-3-largest-prime-factor/",
        "title": "Project Euler Problem 3: Largest prime factor",
        "section": "blog",
        "tags": ["programming"],
        "date" : "2019.10.02",
        "body": "Problem: The prime factors of 13195 are 5, 7, 13 and 29.\nWhat is the largest prime factor of the number 600851475143 ?\nSolution: Về cơ bản, đây là bài toán phân tích một số thành thừa số nguyên tố và chọn ra số nguyên tố lớn nhất.\nĐể phân tích một số N thành thừa số nguyên tố:\n Ta sẽ liên tục chia N cho số nguyên tố t(k) cho tới khi không thể tiếp tục được nữa. Tới đây: Nếu N \u0026gt; t(k) thì ta tìm số nguyên tố t(k+1) quay lại bước trên. Nếu N \u0026lt; t(k) thì t(k) là số nguyên tố lớn nhất. Mã code với Rust.:  fn get_next_prime_number(arr: \u0026amp;Vec\u0026lt;i64\u0026gt;) -\u0026gt; i64 {\rlet last_prime = arr.last().unwrap();\rlet mut next_prime = last_prime + 1;\rloop {\rlet mut is_valid = true;\rfor x in arr {\rif next_prime % x == 0 {\ris_valid = false;\rbreak;\r}\r}\rif is_valid {\rbreak;\r} else {\rnext_prime = next_prime + 1;\r}\r}\rreturn next_prime;\r}\rfn largest_prime_factor(mut n: i64) -\u0026gt; i64 {\rlet mut arr = Vec::new();\rarr.push(2);\rlet mut current_prime: i64;\rloop {\rcurrent_prime = arr[arr.len() -1];\rwhile n % current_prime == 0 \u0026amp;\u0026amp; n \u0026gt;= current_prime {\rn = n / current_prime;\r}\rif n \u0026gt; current_prime {\rlet temp = get_next_prime_number(\u0026amp;arr);\rarr.push(temp);\r} else {\rbreak;\r}\r}\rreturn current_prime;\r}\rfn main() {\rprintln!(\u0026quot;Larngest prime factor is: {}\u0026quot;, largest_prime_factor(600851475143));\r}\r#[test]\rfn test_get_next_prime() {\rlet mut arr = Vec::new();\rarr.push(2);\rlet mut i = 0;\rwhile i \u0026lt; 10 {\rlet temp = get_next_prime_number(\u0026amp;arr);\rarr.push(temp);\ri = i + 1;\r}\rassert_eq!(arr.len(), 11);\rassert_eq!(arr[1], 3);\r}\r#[test]\rfn test_largest_prime_factor() {\rassert_eq!(largest_prime_factor(13195), 29);\r}\r"
    }
]
